"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatQuarter = exports.compareDates = exports.getWeekOfYear = exports.getWeekDaysRange = exports.getDateUtc = void 0;
const getDateUtc = (date) => {
    const dateValue = new Date(date);
    return new Date(dateValue.getTime() + dateValue.getTimezoneOffset() * 60000).toString();
};
exports.getDateUtc = getDateUtc;
const dateOptions = { month: 'numeric', day: 'numeric' };
const formatWeekDaysRange = (start, end) => `[${start.toLocaleDateString('en-US', dateOptions)} - ${end.toLocaleDateString('en-US', dateOptions)}]`;
const getWeekDaysRange = (week) => {
    const year = new Date().getFullYear();
    const firstDayOfYear = new Date(year, 0, 1);
    let pivotDay = 1 + (week - 1) * 7 - firstDayOfYear.getDay();
    if (firstDayOfYear.getDay() > 4)
        pivotDay += 7;
    const weekStart = new Date(year, 0, pivotDay);
    const weekEnd = new Date(year, 0, pivotDay + 6);
    return formatWeekDaysRange(weekStart, weekEnd);
};
exports.getWeekDaysRange = getWeekDaysRange;
const getWeek = (date) => {
    const onejan = new Date(date.getFullYear(), 0, 1);
    return Math.ceil(((date - +onejan) / 86400000 + onejan.getDay() + 1) / 7) - 1;
};
const getWeekOfYear = () => getWeek(new Date());
exports.getWeekOfYear = getWeekOfYear;
const compareDates = (a, b) => {
    const aDate = new Date(a);
    const bDate = new Date(b);
    if (aDate < bDate)
        return -1;
    if (aDate > bDate)
        return 1;
    return 0;
};
exports.compareDates = compareDates;
const formatQuarter = (rawQuarter) => {
    const [year, quarter] = rawQuarter.split('-');
    return `${quarter}-${year}`;
};
exports.formatQuarter = formatQuarter;
