"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCsvData = void 0;
const escapeValuesWithQuotes = (str) => str.match(/\$-?(\d{1,3},+)?(\d{1,3},\d{3}\.\d+)/g) ? str.replace(/,\$/g, '","$') : str.replace(/,/g, '","');
const escapeValuesWithCommas = (data) => data.map((value) => value.map((text) => {
    const textString = !text ? 'N/A' : text.toString().replace(/\s+(?=\s)/g, '');
    const paragraphCommas = (textString.match(/(,\s)+/g) || []).length;
    return textString.includes(',') && paragraphCommas === 0
        ? `"${escapeValuesWithQuotes(textString)}"`
        : `"${textString}"`;
}));
const createCsvData = (csv, headers) => {
    const data = escapeValuesWithCommas([...csv]);
    data.unshift(headers.join(','));
    return data.join('\r\n');
};
exports.createCsvData = createCsvData;
const createCsv = (csv, headers, fileName) => {
    const dataWithBom = `\uFEFF${(0, exports.createCsvData)(csv, headers)}`;
    const blob = new Blob([dataWithBom], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', fileName);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
};
exports.default = createCsv;
