"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatter = exports.FormatTypes = void 0;
const toLocalTime_1 = __importDefault(require("./toLocalTime"));
var FormatTypes;
(function (FormatTypes) {
    FormatTypes["MONEY"] = "money";
    FormatTypes["PERCENTAGE"] = "percentage";
    FormatTypes["DECIMAL_PERCENTAGE"] = "decimalPercentage";
    FormatTypes["DATE"] = "date";
    FormatTypes["DATE_LOCAL"] = "dateLocal";
    FormatTypes["DECIMAL"] = "decimal";
    FormatTypes["NUMBER"] = "number";
    FormatTypes["DAYS"] = "days";
    FormatTypes["MONTHS"] = "months";
})(FormatTypes = exports.FormatTypes || (exports.FormatTypes = {}));
const formatter = (data, format) => {
    if (!data && format === FormatTypes.MONEY)
        return '$0.00';
    if (data == null)
        return 'N/A';
    const stringData = data.toString();
    switch (format) {
        case FormatTypes.MONEY: {
            const parsedMoney = parseFloat(stringData);
            const truncate = Math[parsedMoney < 0 ? 'ceil' : 'floor'](parsedMoney * 100000) / 100000;
            return !parsedMoney ? 'N/A' : `$${truncate.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')}`;
        }
        case FormatTypes.PERCENTAGE:
            return `${Math.round(parseFloat(stringData))}%`;
        case FormatTypes.DECIMAL_PERCENTAGE:
            return `${parseInt(stringData, 10).toFixed(2)}%`;
        case FormatTypes.NUMBER:
            return `${parseInt(stringData, 10)}`;
        case FormatTypes.DATE:
            return (0, toLocalTime_1.default)(stringData).toLocaleDateString('en-us');
        case FormatTypes.DATE_LOCAL:
            return new Date(stringData).toLocaleDateString('en-us');
        case FormatTypes.DECIMAL: {
            const parsedDecimal = parseFloat(stringData);
            return !parsedDecimal ? 'N/A' : parsedDecimal.toFixed(2);
        }
        case FormatTypes.DAYS:
            return `${stringData} days`;
        case FormatTypes.MONTHS:
            return `${stringData} months`;
        default:
            return 'N/A';
    }
};
exports.formatter = formatter;
